{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Vivek.K.ipynb",
      "private_outputs": true,
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "V6s7Rv09m-Uy"
      },
      "source": [
        "In [ ]:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Kmwy6Ai_nVkp"
      },
      "source": [
        " import numpy as np\n",
        "import pandas as pd\n",
        "import sklearn"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UAnRPfjSwm92"
      },
      "source": [
        " In [ ]:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZphSXfidwqtn"
      },
      "source": [
        " from sklearn.datasets import load_boston\n",
        "df = load_boston()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YuQsy0dxw0iT"
      },
      "source": [
        " In [ ]:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RDvMjM1zw3c3"
      },
      "source": [
        " df.keys()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ldkjxOygxTU3"
      },
      "source": [
        " In [ ]:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HmGgv3n_xWNn"
      },
      "source": [
        " boston = pd.DataFrame(df.data, columns=df.feature_names)\n",
        "boston.head()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6Ev6oTR6yoU8"
      },
      "source": [
        " In [ ]:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bBm_bO4Y21xb"
      },
      "source": [
        " boston['MEDV'] = df.target\n",
        "boston.head()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9jHCvYRm27aX"
      },
      "source": [
        " In [ ]:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "snVX1Yuo3L9h"
      },
      "source": [
        " boston.isnull()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uWgMb-Lc3Ps6"
      },
      "source": [
        " In [ ]:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bO9dwTK63UHl"
      },
      "source": [
        " boston.isnull().sum()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "apVAOrFi3b92"
      },
      "source": [
        " In [ ]:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bPyKIeuV3ejq"
      },
      "source": [
        " from sklearn.model_selection import train_test_split\n",
        " \n",
        "X = boston.drop('MEDV', axis=1)\n",
        "Y = boston['MEDV']\n",
        " \n",
        "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.15, random_state=5)\n",
        " \n",
        "print(X_train.shape)\n",
        "print(X_test.shape)\n",
        "print(Y_train.shape)\n",
        "print(Y_test.shape)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6iPCUFgm3kAX"
      },
      "source": [
        " In [ ]:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Bnq3vbnl3nsj"
      },
      "source": [
        " from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_squared_error"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SRSrzgN43vXq"
      },
      "source": [
        " ## FITTING MODEL ON THE TRAINING DATASET\n",
        " \n",
        "lin_model = LinearRegression()\n",
        " \n",
        "lin_model.fit(X_train, Y_train)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "th92D_g432v8"
      },
      "source": [
        " In [ ]:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NnEmbell37K6"
      },
      "source": [
        " y_train_predict = lin_model.predict(X_train)\n",
        "rmse = (np.sqrt(mean_squared_error(Y_train, y_train_predict)))\n",
        " \n",
        "print(\"The model performance for training set\")\n",
        "print('RMSE is {}'.format(rmse))\n",
        "print(\"\\n\")\n",
        " \n",
        "# on testing set\n",
        "y_test_predict = lin_model.predict(X_test)\n",
        "rmse = (np.sqrt(mean_squared_error(Y_test, y_test_predict)))\n",
        " \n",
        "print(\"The model performance for testing set\")\n",
        "print('RMSE is {}'.format(rmse))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZS-M2YbT4DFj"
      },
      "source": [
        "In [ ]:"
      ]
    }
  ]
}